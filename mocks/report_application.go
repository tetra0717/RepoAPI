// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/report.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"
	model "repo-api/src/domain/model"

	gomock "github.com/golang/mock/gomock"
)

// MockReportApp is a mock of ReportApp interface.
type MockReportApp struct {
	ctrl     *gomock.Controller
	recorder *MockReportAppMockRecorder
}

// MockReportAppMockRecorder is the mock recorder for MockReportApp.
type MockReportAppMockRecorder struct {
	mock *MockReportApp
}

// NewMockReportApp creates a new mock instance.
func NewMockReportApp(ctrl *gomock.Controller) *MockReportApp {
	mock := &MockReportApp{ctrl: ctrl}
	mock.recorder = &MockReportAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportApp) EXPECT() *MockReportAppMockRecorder {
	return m.recorder
}

// Eject mocks base method.
func (m *MockReportApp) Eject(DB *sql.DB, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eject", DB, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Eject indicates an expected call of Eject.
func (mr *MockReportAppMockRecorder) Eject(DB, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eject", reflect.TypeOf((*MockReportApp)(nil).Eject), DB, ID)
}

// Get mocks base method.
func (m *MockReportApp) Get(DB *sql.DB, ID, AuthorID, Title, Style, Language string) ([]model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", DB, ID, AuthorID, Title, Style, Language)
	ret0, _ := ret[0].([]model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReportAppMockRecorder) Get(DB, ID, AuthorID, Title, Style, Language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReportApp)(nil).Get), DB, ID, AuthorID, Title, Style, Language)
}

// Register mocks base method.
func (m *MockReportApp) Register(DB *sql.DB, report model.Report) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", DB, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockReportAppMockRecorder) Register(DB, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockReportApp)(nil).Register), DB, report)
}

// Update mocks base method.
func (m *MockReportApp) Update(DB *sql.DB, ID string, Count int, Title, Style, Language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", DB, ID, Count, Title, Style, Language)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReportAppMockRecorder) Update(DB, ID, Count, Title, Style, Language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportApp)(nil).Update), DB, ID, Count, Title, Style, Language)
}
