// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"
	model "repo-api/src/domain/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUserApp is a mock of UserApp interface.
type MockUserApp struct {
	ctrl     *gomock.Controller
	recorder *MockUserAppMockRecorder
}

// MockUserAppMockRecorder is the mock recorder for MockUserApp.
type MockUserAppMockRecorder struct {
	mock *MockUserApp
}

// NewMockUserApp creates a new mock instance.
func NewMockUserApp(ctrl *gomock.Controller) *MockUserApp {
	mock := &MockUserApp{ctrl: ctrl}
	mock.recorder = &MockUserAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApp) EXPECT() *MockUserAppMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserApp) Get(DB *sql.DB, ID string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", DB, ID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserAppMockRecorder) Get(DB, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserApp)(nil).Get), DB, ID)
}

// Register mocks base method.
func (m *MockUserApp) Register(DB *sql.DB, ID, Name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", DB, ID, Name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserAppMockRecorder) Register(DB, ID, Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserApp)(nil).Register), DB, ID, Name)
}

// Update mocks base method.
func (m *MockUserApp) Update(DB *sql.DB, ID, Name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", DB, ID, Name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserAppMockRecorder) Update(DB, ID, Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserApp)(nil).Update), DB, ID, Name)
}
